// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

generator zod {
    provider = "yarn zod-prisma-types"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
    ADMIN
    USER
}

model User {
    id             String         @id @default(cuid())
    name           String
    email          String         @unique
    emailVerified  DateTime?
    image          String?
    sex            String?
    password       String
    date_of_birth  DateTime
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    accounts       Account[]
    sessions       Session[]
    role           UserType       @default(USER)
    password_reset PasswordReset?
    address        Address[]
    cart           Cart[]
    order          Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PasswordReset {
    id         String   @id @default(cuid())
    user_id    String   @unique
    token      String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([user_id, token])
}

enum AddressType {
    HOME
    OFFICE
    OTHER
}

model Address {
    id             String      @id @default(cuid())
    name           String
    phone_number   String
    province       Province?   @relation(fields: [province_id], references: [province_id])
    district       District?   @relation(fields: [district_id], references: [district_id])
    ward           Ward?       @relation(fields: [ward_id], references: [ward_id])
    address_detail String
    type_address   AddressType
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    province_id    String
    district_id    String
    ward_id        String
    user           User?       @relation(fields: [userId], references: [id])
    userId         String?
    order          Order[]
}

model District {
    district_id String    @id @default(cuid())
    province_id String
    name        String
    Province    Province? @relation(fields: [province_id], references: [province_id])
    ward        Ward[]
    address     Address[]
}

model Province {
    province_id String     @id @default(cuid())
    name        String
    districts   District[]
    address     Address[]
}

model Ward {
    ward_id     String    @id @default(cuid())
    district_id String
    name        String
    district    District? @relation(fields: [district_id], references: [district_id])
    address     Address[]
}

model Unit {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    product   Product[]
}

enum status {
    DANG_BAN
    HET_HANG
    DUNG_BAN
    DEN_HIEU_THUOC
}

model Product {
    id             String         @id @default(cuid())
    name           String
    price          Float
    quantity       Int
    unit_id        String
    expired_date   DateTime
    category_id    String
    trademark_id   String
    status         status
    image          ImageProduct[]
    unit           Unit?          @relation(fields: [unit_id], references: [id])
    category       Category?      @relation(fields: [category_id], references: [id])
    cart           Cart[]
    order          Order[]
    product_detail ProductDetail?
    trademark      Trademark?     @relation(fields: [trademark_id], references: [id])
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
}

model ProductDetail {
    id                String   @id @default(cuid())
    product_id        String   @unique
    description       String
    short_description String
    ingredient        String
    how_to_use        String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    product           Product  @relation(fields: [product_id], references: [id])
}

model ImageProduct {
    id         String   @id @default(cuid())
    url        String
    product_id String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    product    Product? @relation(fields: [product_id], references: [id])
}

model Category {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    product   Product[]
}

model Cart {
    id         String   @id @default(cuid())
    user_id    String
    product_id String
    quantity   Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [user_id], references: [id])
    product    Product  @relation(fields: [product_id], references: [id])
}

model Order {
    id              String         @id @default(cuid())
    user_id         String
    product_id      String
    quantity        Int
    address_id      String
    is_paid         Boolean
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    address         Address        @relation(fields: [address_id], references: [id])
    User            User           @relation(fields: [user_id], references: [id])
    product         Product        @relation(fields: [product_id], references: [id])
    status          StatusOrder    @relation(fields: [status_order_id], references: [id])
    status_order_id String
    payment_method  PaymentMethod?
}

model StatusOrder {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    order     Order[]
}

model Trademark {
    id        String    @id @default(cuid())
    name      String
    image     String
    country   String
    introduce String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    product   Product[]
}

enum PaymentStatus {
    PENDING
    SUCCESS
    FAILED
}

model PaymentMethod {
    id               String        @id @default(cuid())
    order_id         String        @unique
    payment_source   String
    order_payment_id String?
    payment_id       String?
    payer_id         String
    status           PaymentStatus
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    order            Order?        @relation(fields: [order_id], references: [id])
}
