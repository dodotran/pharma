// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

generator zod {
    provider = "yarn zod-prisma-types"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
    ADMIN
    USER
}

model User {
    id             String         @id @default(cuid())
    name           String
    email          String         @unique
    emailVerified  DateTime?
    image          String?
    sex            String?
    password       String
    date_of_birth  DateTime
    accounts       Account[]
    sessions       Session[]
    role           UserType       @default(USER)
    password_reset PasswordReset?
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    address        Address[]
    Cart           Cart[]
    // Invoice        Invoice[]
    order          Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PasswordReset {
    id         String   @id @default(cuid())
    user_id    String   @unique
    token      String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([user_id, token])
}

enum AddressType {
    HOME
    OFFICE
}

model Address {
    id             String      @id @default(cuid())
    name           String
    phone_number   String
    province       Province    @relation(fields: [province_id], references: [province_id])
    district       District    @relation(fields: [district_id], references: [district_id])
    wards          Wards       @relation(fields: [wardsWards_id], references: [wards_id])
    address_detail String
    type_address   AddressType
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    province_id    String
    district_id    String
    wardsWards_id  String
    User           User?       @relation(fields: [userId], references: [id])
    userId         String?
    // Invoice        Invoice[]
}

model District {
    district_id String    @id @default(cuid())
    province_id String
    name        String
    Province    Province? @relation(fields: [province_id], references: [province_id])
    Ward        Wards[]
    Address     Address[]
}

model Province {
    province_id String     @id @default(cuid())
    name        String
    districts   District[]
    Address     Address[]
}

model Wards {
    wards_id    String    @id @default(cuid())
    district_id String
    name        String
    District    District? @relation(fields: [district_id], references: [district_id])
    Address     Address[]
}

model Unit {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]
}

enum status {
    DANG_BAN
    HET_HANG
    DUNG_BAN
    DEN_HIEU_THUOC
}

model Product {
    id            String          @id @default(cuid())
    name          String
    price         Float
    quantity      Int
    unit_id       String
    expired_date  DateTime
    status        status
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    image         ImageProduct[]
    category_id   String?
    unit          Unit            @relation(fields: [unit_id], references: [id])
    category      Category?       @relation(fields: [category_id], references: [id])
    cart          Cart[]
    order         Order[]
    ProductDetail ProductDetail[]
}

model ProductDetail {
    id                    String   @id @default(cuid())
    product_id            String
    name                  String
    description           String
    short_description     String
    bar_code              String?
    ingredient            String
    manufacturing_country String
    manufacturer          String
    how_to_use            String
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    Product               Product? @relation(fields: [product_id], references: [id])
}

model ImageProduct {
    id         String   @id @default(cuid())
    url        String
    product_id String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    Product    Product? @relation(fields: [product_id], references: [id])
}

model Category {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]
}

model Cart {
    id         String   @id @default(cuid())
    user_id    String
    product_id String
    quantity   Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    User       User     @relation(fields: [user_id], references: [id])
    Product    Product  @relation(fields: [product_id], references: [id])
}

model Order {
    id              String      @id @default(cuid())
    user_id         String
    product_id      String
    quantity        Int
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    User            User        @relation(fields: [user_id], references: [id])
    Product         Product     @relation(fields: [product_id], references: [id])
    status          StatusOrder @relation(fields: [status_order_id], references: [id])
    status_order_id String
}

model StatusOrder {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Order     Order[]
}
